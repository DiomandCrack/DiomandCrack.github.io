{"meta":{"title":"张堃的博客","subtitle":"每天学习新知识 记录点滴生活","description":"这个人很懒~什么都没留下","author":"张堃","url":"DiomandCrack.github.io"},"pages":[{"title":"categories","date":"2017-10-23T16:10:12.000Z","updated":"2017-10-23T16:10:12.598Z","comments":true,"path":"categories/index.html","permalink":"DiomandCrack.github.io/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"2.数据类型","slug":"2-数据类型","date":"2017-10-24T14:38:55.000Z","updated":"2017-10-24T16:53:00.111Z","comments":true,"path":"2017/10/24/2-数据类型/","link":"","permalink":"DiomandCrack.github.io2017/10/24/2-数据类型/","excerpt":"","text":"操作符与数据类型检测数据类型-typeof 操作符12var awesome = \"被自己帅醒\";typeof awesome //\"string\" typeof 输出的格式是字符串 1234var a=1;typeof a; //\"number\"var b=ture;typeof b; //“boolean” typeof 可以返回的值有 “undefined” “boolean” “string” “number” “object” 这有个bug null属于Null数据类型 但是用typeof测出来是object “function” 12var what = nulltypeof what //\"object\" 使用调试工具敲一些简短的代码可以直接在浏览器的调试工具中测试代码 1.打开chrome或者firefox,ie也可以(那个..ie6及以下…) 2.按f12或者右键选检查 点console选项卡 即可调试输入的代码 操作符加减操作符121+1 //22-1 //1 加法还有个功能 拼接字符串(字符串的定义在下面) 1'a'+'b' = 'ab'; 还记得C不了++(自增) –(自减) 基本数据类型 undefined(未定义) null(空) Number(数字) Boolean(布尔值) String(字符串) Symbol(符号 ES6新增) Boolean 布尔值只有两个值 true或false Undefined类型只有一个值 undefined 使用var声明变量但没有初始化时，这个变量就是undefined 12var my;typeof my //\"undefined\" 声明了没赋值是Undefined数据类型如果没有定义变量就去引用会报错 12console.log(str) // 报错console.log('str') // str 这是字符串 Null类型也只有一个值 null 表示的是将来可能用来保存对象的变量 由于undefined派生自null 12undefined == null; //true;undefined === null; //false 字符串字符串","categories":[{"name":"笔记","slug":"笔记","permalink":"DiomandCrack.github.io/categories/笔记/"},{"name":"JavaScirpt学习笔记","slug":"笔记/JavaScirpt学习笔记","permalink":"DiomandCrack.github.io/categories/笔记/JavaScirpt学习笔记/"}],"tags":[{"name":"js笔记","slug":"js笔记","permalink":"DiomandCrack.github.io/tags/js笔记/"}]},{"title":"1.初识JavaScript","slug":"1-初始JavaScript","date":"2017-10-23T14:58:26.000Z","updated":"2017-10-24T14:56:02.336Z","comments":true,"path":"2017/10/23/1-初始JavaScript/","link":"","permalink":"DiomandCrack.github.io2017/10/23/1-初始JavaScript/","excerpt":"","text":"初识JavaScript什么是JavaScript基本概念JavaScript 诞生于1995年，是一种基于对象和事件驱动的客户端脚本语言，主要处理表单验证功能 基本组成JavaScript 由3部分组成 ECMAScript 核心语法 ECMA-262标准 DOM (Document Object Model) 文档对象模型 BOM (Brower Object Model) 浏览器对象模型 1 ECMAScript组成部分 语法 类型 语句 关键字 保留字 操作符 对象 2 DOM DOM 也叫做 DOM树 针对XML 但经过扩展用于HTML的应用编程接口(API,Application Programming Interface) 浏览器操作文档 实际上是操作DOM 3 BOM 处理浏览器窗口和框架 了解JavaScript如何在HTML中使用JavaScript使用&lt;script&gt;元素 使用&lt;script&gt;元素有两种方法 1.直接在&lt;script&gt;&lt;/script&gt;标签中嵌入JavaScript代码 12345678&lt;html&gt;&lt;head&gt;...&lt;/head&gt;&lt;body&gt;&lt;script&gt; alert('hello world!');&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 2.链接外部JavaScript文件 123456&lt;html&gt;&lt;head&gt;...&lt;/head&gt;&lt;body&gt; &lt;script src=\"example.js\"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 一般把所有&lt;script&gt;&lt;/script&gt;都放在&lt;body&gt;&lt;/body&gt;元素中最后面并外链JavaScript文件12345&lt;body&gt;&lt;!--我是内容--&gt;&lt;script src=\"example.js\"&gt;&lt;/script&gt;&lt;/body&gt; 不应该在外链src的&lt;script&gt;&lt;/script&gt;元素之间插入js代码 JavaSrcipt基本语法1.JavaScript中严格区分大小写 12var dog;var Dog; //这是两个完全不同的变量 2.每一条语句之后都要加上一个分号; 1var a; 3.注释 注释有两种 123//单行注释/*多行注释*/ 4.严格模式 引入严格模式 使JavaScript 不安全的操作会报错 不确定的行为得到处理启用严格模式，在顶部添加代码 1\"use strict\"; 5.标识符 变量名、常量名、函数名、函数参数名、对象属性名的统称 标识符的命名规则 由数字、字母、下划线(_)和美元符($)组成 首字符不能使数字 不能使用JavaScript关键字和保留字 标识符的名字可以是任意长度 标识符采用驼峰大小写格式: 第一个单词全小写 剩下的每个单词的首字母大写 12var myFirstCar;var nothingToDo; 关键字 关键字可用于表示控制语句的开始或结束，或者用于执行特定操作按照规定关键字不能用作标识符。以下是JavaScript全部关键字 1234567| break | do | instanceof | typeof || case | else | new | var || catch | finally | return | void || continue | for | switch | while || debugger | function | this | with || defalut | if | throw | delete || in | try | | | 严格模式下 关键字 12| class | enum | extends | super || const | export | import | | 保留字 保留字还没有任何特定的用途。当它们有将来被用作关键字 12345678| abstract | enum | Int | short || boolean | export | interface | static || byte | extends | long | super || char | final | native | synchronized || class | float | package | throws || const | goto | private | transient || debugger | implements | protected | volatile || double | import | public | | 严格模式下 保留字 123| implements | package | public | interface || private | static | let | protected || yield | | | | 6.变量 变量是标识符的一种，用来存储数据 ECMAScript的变量是松散类型.可以保存任何类型的数据， 每个变量仅仅是一个用于保存值的占位符 声明变量 1var a=\"hello world\"; // a就是一个变量 如果局部变量中不加var 会变成全局变量 严格模式下会报错 如果声明一个变量，没有初始化那么默认值是: undefined(未定义); 12 var a; //声明了一个变量，这个变量名叫a，a存储的值为undefinedalert(a); 赋值运算符”=”,不代表数学中等于 而是将 等号右侧的数据给了等号左侧 1var b=1; //声明了一个变量，命名为b并且初始化了一个数据是数字1 同时声明多个变量 123var a=1;var b=2;var c=3; 等价于 1var a=1,b=2,c=3; 7.代码测试: console.log() console.log()向控制台打印括号中的内容 1console.log('hello,world'); 总结 JavaScript 由三部分组成 ECMAScript、DOM和BOM组成 有两种方法引用JavaScript代码 一种是内部嵌套，另一种是外链JavaScript文件 标识符命名规则 关键字和保留字不能用作标识符 可以用console.log()向控制台打印内容","categories":[{"name":"笔记","slug":"笔记","permalink":"DiomandCrack.github.io/categories/笔记/"},{"name":"JavaScirpt学习笔记","slug":"笔记/JavaScirpt学习笔记","permalink":"DiomandCrack.github.io/categories/笔记/JavaScirpt学习笔记/"}],"tags":[{"name":"js笔记","slug":"js笔记","permalink":"DiomandCrack.github.io/tags/js笔记/"}]},{"title":"My First Blog","slug":"hello","date":"2017-10-22T09:09:55.000Z","updated":"2017-10-24T06:54:41.973Z","comments":true,"path":"2017/10/22/hello/","link":"","permalink":"DiomandCrack.github.io2017/10/22/hello/","excerpt":"","text":"我的第一篇博客！半路出家刚开始接触前端这行 需要学习很多知识 学习前端是兴趣使然近来发现前端体系异常庞大与繁杂希望：以后不会轻易迷失在各种诱惑里 也不会在向前走的同时无暇顾及反省自己 “人生不能承受的，不是存在，而是作为自我的存在。 生活，生活并没有任何幸福可言。生活，就是在这尘世中带着痛苦的自我。 然而存在，存在就是幸福。存在：变成喷泉，在这石头的承水盘中，世界仿佛热雨一般倾泻而下。” –米兰昆德拉 《不朽》","categories":[{"name":"日志","slug":"日志","permalink":"DiomandCrack.github.io/categories/日志/"}],"tags":[{"name":"Hello World!","slug":"Hello-World","permalink":"DiomandCrack.github.io/tags/Hello-World/"}]},{"title":"Hello World","slug":"hello-world","date":"2017-10-22T08:56:25.802Z","updated":"2017-10-22T08:56:25.802Z","comments":true,"path":"2017/10/22/hello-world/","link":"","permalink":"DiomandCrack.github.io2017/10/22/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}
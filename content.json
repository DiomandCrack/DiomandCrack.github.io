{"meta":{"title":"张堃的博客","subtitle":"每天学习新知识 记录点滴生活","description":"JavaScript","author":"张堃","url":"DiomandCrack.github.io"},"pages":[{"title":"categories","date":"2017-10-23T16:10:12.000Z","updated":"2017-10-23T16:10:12.598Z","comments":true,"path":"categories/index.html","permalink":"DiomandCrack.github.io/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"2.数据类型","slug":"2-数据类型","date":"2017-10-24T14:38:55.000Z","updated":"2017-10-26T15:14:37.155Z","comments":true,"path":"2017/10/24/2-数据类型/","link":"","permalink":"DiomandCrack.github.io2017/10/24/2-数据类型/","excerpt":"操作符与数据类型JavaScript数据类型分为基本数据类型和引用数据类型","text":"操作符与数据类型JavaScript数据类型分为基本数据类型和引用数据类型 基本数据类型又分为: Undefined (未定义) Null (空指针) Number (数字) Boolean (布尔值) String (字符串) Symbol (符号 ES6新增) 引用数据类型为: 对象 除了基本数据类型 剩下都是引用数据类型 检测数据类型-typeof 操作符var awesome = \"被自己帅醒\";typeof awesome //\"string\" typeof 输出的格式是字符串 var a=1;typeof a; //\"number\"var b=ture;typeof b; //“boolean” typeof 可以返回的值有 “undefined” “boolean” “string” “number” “object” 这有个bug null属于Null数据类型 但是用typeof测出来是object “function” var what = nulltypeof what //\"object\" 使用调试工具敲一些简短的代码可以直接在浏览器的调试工具中测试代码 1.打开chrome或者firefox,ie也可以(那个..ie6及以下…) 2.按f12或者右键选检查 点console选项卡 即可调试输入的代码 基本数据类型 undefined(未定义) null(空) Number(数字) Boolean(布尔值) String(字符串) Symbol(符号 ES6新增) Boolean 布尔类型只有两个值 true或false true 真 false 假 var a = true // 这个变量储存的是 布尔值var b = 'true' // 这个变量储存的是 字符串 Undefined类型只有一个值 undefined 使用var声明变量但没有初始化时，这个变量就是undefined var my;typeof my //\"undefined\" 声明了没赋值是Undefined数据类型如果没有定义变量就去引用会报错 console.log(str) // 报错console.log('str') // str 这是字符串 Null类型也只有一个值 null 表示的是将来可能用来保存对象的变量 由于undefined派生自null undefined == null; //true;undefined === null; //false ??? Number 数字类型正常情况下为十进制,如果数字前两位为0x后面都是十六进制数字(0~9,a~f) 取值范围 ECMAScript 能取到的 最大值为： 1.7976931348623157e+308 最小值为： 5e-324 如果超出这个取值范围就转换为： Infinity 负数转换为： -Infinity 正数转换为： +Infinity 整数 var num = 5 //整数var a = 0xff // 255 转为10进制：15*16的0次方+15*16的1次方 15+240=255var b = 0xAA //170 转为10进制：10*16的0次方+ 10*16的1次方 10+160=170 浮点数(小数) 由于保存浮点数值需要的内存空间是保存整数值的两倍因此ECMAScript会不失时机将浮点数转换为整数值 var float = 1.0; //1 浮点数的最高精度是17为小数,但运算时浮点数是不准确的 var a = 0.1;var b = 0.2;console.log(a + b); //0.30000000000000004 所以浮点数的计算结果不能判断是否为一个特定的浮点数 var a = 0.1;var b = 0.2;console.log(a + b == 0.3); // false NaN NaN (Not a Number) 是一个特殊的数字类型表示的是在数字运算中出现了错误 var a = 0;var b = 1;console.log(b / a); //NaN 特点： 1.任何涉及NaN的运算都会得出NaN 2.NaN跟任何值都不相等包括它自己 console.log(NaN == NaN); //false String 字符串类型String 类型用于表示0或多个字符(Unicode字符)组成的字符序列,由单引号、双引号或反引号表示 var firstName = 'Final';var lastName = \"Fantasy\"var game = `Final Fantasy`; 引号必须成对出现 单引号开头必须单引号结尾 双引号开头必须双引号结尾 反引号开头必须反引号结尾 字符串的特点: ECMAScript的字符串是不可更改的，一旦创建就不可改变,如果改变变量中的字符串，必须销毁原来的字符串，然后创建新的 var userName = 'Diamond';var userName = 'Diamond Crack'; 引用数据类型 对象 对象是属性的集合，每个属性都由”键值对”构成 key(键) 属性的名字 value(值) 属性的值 对象具有属性和方法,基本数据类型没有属性和方法我的理解：对象就是用计算机语言去描述事物 可以是具体的 也可以是抽象的 比如:一只猫(一个自定义对象)：名字：三味线年龄：3岁毛色：黄色和白色这些是猫的 属性：值 他能：说话，吃鱼，喝水，这些是猫的 方法 //上面那只猫用JavaScript 表示成下面的形式const cat = &#123; name: 'sanweixian', //除最后一个 一每个属性和方法都要加`.` age:3， color: 'yellow and white', talk()&#123;console.log('说话了！')&#125;, drink()&#123;console.log('喝水')&#125;, eat()&#123;console.log('吃鱼')&#125; //最后一个属性或方法 不能加`,`&#125;; 操作符赋值操作符赋值操作符就是(=),把右边的值赋给左侧的变量 var me = 'poor'; 加减操作符加操作符 var a = 1;var b = 2console.log(a+b) //3 var num = 1;num += 1 //2 等价于 num = num + 1 加法还有个功能 拼接字符串(字符串的定义在) console.log('a'+'b');//\"ab\" 减操作符 var a = 1;var b = 2console.log(a-b) //-1 var num = 2;num -=1; //1 等价于 num = num - 1 一元操作符 ++ (自增) var number = 50++number //51 等价于 number = number + 1 number先加1(51)再把新的值给number 1.前自增 等号右边赋值给左边之前自己增加1 var number = 20;var another = ++number; console.log(number) //21console.log(another) //21//number先加1 再赋值(=)给another 2.后自增 等号右边赋值给左边之后自己赠加1 var number = 10;var another = number++; console.log(another)//10console.log(number) //11 -- (自减) var number = 30;number--; //等价于 number = number - 1 1.前自减 等号右边赋值给左边之前自己减1 var number = 30;another = --number;console.log(number); //29console.log(another); //29 2.后自减 等号右边赋值给左边之后自己减1 var number = 666;another = number--;console.log(number); //666console.log(another); //665 乘除操作符1.乘法 乘法操作符(*) var a = 5*5 //结果为25 2.除法 除法操作符(/) var a=4, b=2;a / b = 2; 3.求余数 var a = 20;var b = 11;a % b // 9 相等操作符相等操作符 确定两个变量是否相等 1.相等操作符、不相等操作符 如果左右两侧的值不属于同一种数据类型 这两种方法 会强制向数字类型转换 再比较 相等操作符(==) 如果左右两侧值相等 就返回 true 否则返回false不相等操作符(!=) 如果左右两侧值不相等 就返回 true 否则返回false 2.严格相等操作符 严格不相等操作符 严格相等操作符(===) 如果左右两侧值相等 就返回true 否则返回false严格不相等操作符(!==) 如果左右两侧值不相等 就返回true 否则返回false 布尔操作符布尔操作符 一共有三个: 与(&amp;&amp;)、或(||)、非(!); 1.逻辑与(&amp;&amp;) 逻辑与 会一直向后找，直到找到第一个转布尔值为false的值，如果没有就是最后一个值 const result = 第一个操作数 &amp;&amp; 第二个操作数 真值表: 第一个操作数 第二个操作数 结果 true ture true true false false false true false false false false 2.逻辑或(||) 逻辑或 会一直向后找，直到找到第一个转布尔值为true的值，如果没有就返回最后一个 const result = 第一个操作数 || 第二个操作数 第一个操作数 第二个操作数 结果 true ture true true false true false true true false false false 3.逻辑非(!) 关系操作符关系操作符有 大于(&gt;)、小于(&lt;)、小于等于(&lt;=)、和大于等于(&gt;=) 等号(=)必须在小于(&lt;)或大于(&gt;)的右侧 const a = 1;const b = 2;a &lt; b // truea &lt;= b // true//a =&lt; b 报错a &gt;= b // falsea =&gt; b // a =&gt; b","categories":[{"name":"笔记","slug":"笔记","permalink":"DiomandCrack.github.io/categories/笔记/"},{"name":"JavaScirpt学习笔记","slug":"笔记/JavaScirpt学习笔记","permalink":"DiomandCrack.github.io/categories/笔记/JavaScirpt学习笔记/"}],"tags":[{"name":"js笔记","slug":"js笔记","permalink":"DiomandCrack.github.io/tags/js笔记/"}]},{"title":"1.初识JavaScript","slug":"1-初始JavaScript","date":"2017-10-23T14:58:26.000Z","updated":"2017-10-26T15:15:37.583Z","comments":true,"path":"2017/10/23/1-初始JavaScript/","link":"","permalink":"DiomandCrack.github.io2017/10/23/1-初始JavaScript/","excerpt":"初识JavaScript什么是JavaScript","text":"初识JavaScript什么是JavaScript 基本概念JavaScript 诞生于1995年，是一种基于对象和事件驱动的客户端脚本语言，曾经主要处理表单验证功能 基本组成JavaScript 由3部分组成 ECMAScript 核心语法 ECMA-262标准 DOM (Document Object Model) 文档对象模型 BOM (Brower Object Model) 浏览器对象模型 1 ECMAScript组成部分 语法 类型 语句 关键字 保留字 操作符 对象 2 DOM DOM 也叫做 DOM树 针对XML 但经过扩展用于HTML的应用编程接口(API,Application Programming Interface) 浏览器操作文档 实际上是操作DOM 3 BOM 处理浏览器窗口和框架 了解JavaScript如何在HTML中使用JavaScript使用&lt;script&gt;元素 使用&lt;script&gt;元素有两种方法 1.直接在&lt;script&gt;&lt;/script&gt;标签中嵌入JavaScript代码 &lt;html&gt;&lt;head&gt;...&lt;/head&gt;&lt;body&gt;&lt;script&gt; alert('hello world!');&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 2.链接外部JavaScript文件 &lt;html&gt;&lt;head&gt;...&lt;/head&gt;&lt;body&gt; &lt;script src=\"example.js\"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 一般把所有&lt;script&gt;&lt;/script&gt;都放在&lt;body&gt;&lt;/body&gt;元素中最后面并外链JavaScript文件&lt;body&gt;&lt;!--我是内容--&gt;&lt;script src=\"example.js\"&gt;&lt;/script&gt;&lt;/body&gt; 不应该在外链src的&lt;script&gt;&lt;/script&gt;元素之间插入js代码 JavaSrcipt基本语法1.JavaScript中严格区分大小写 var dog;var Dog; //这是两个完全不同的变量 2.每一条语句之后都要加上一个分号; var a; 3.注释 注释有两种 //单行注释/*多行注释*/ 4.严格模式 引入严格模式 使JavaScript 不安全的操作会报错 不确定的行为得到处理启用严格模式，在顶部添加代码 \"use strict\"; 5.标识符 变量名、常量名、函数名、函数参数名、对象属性名的统称 标识符的命名规则 由数字、字母、下划线(_)和美元符($)组成 首字符不能使数字 不能使用JavaScript关键字和保留字 标识符的名字可以是任意长度 标识符采用驼峰大小写格式: 第一个单词全小写 剩下的每个单词的首字母大写 var myFirstCar;var nothingToDo; 关键字 关键字可用于表示控制语句的开始或结束，或者用于执行特定操作按照规定关键字不能用作标识符。以下是JavaScript全部关键字 | break | do | instanceof | typeof || case | else | new | var || catch | finally | return | void || continue | for | switch | while || debugger | function | this | with || defalut | if | throw | delete || in | try | | | 严格模式下 关键字 | class | enum | extends | super || const | export | import | | 保留字 保留字还没有任何特定的用途。当它们有将来被用作关键字 | abstract | enum | Int | short || boolean | export | interface | static || byte | extends | long | super || char | final | native | synchronized || class | float | package | throws || const | goto | private | transient || debugger | implements | protected | volatile || double | import | public | | 严格模式下 保留字 | implements | package | public | interface || private | static | let | protected || yield | | | | 6.变量 变量是标识符的一种，用来存储数据 ECMAScript的变量是松散类型.可以保存任何类型的数据， 每个变量仅仅是一个用于保存值的占位符 声明变量 var a=\"hello world\"; // a就是一个变量 如果局部变量中不加var 会变成全局变量 严格模式下会报错 如果声明一个变量，没有初始化那么默认值是: undefined(未定义); var a; //声明了一个变量，这个变量名叫a，a存储的值为undefinedalert(a); 赋值运算符”=”,不代表数学中等于 而是将 等号右侧的数据给了等号左侧 var b=1; //声明了一个变量，命名为b并且初始化了一个数据是数字1 同时声明多个变量 var a=1;var b=2;var c=3; 等价于 var a=1,b=2,c=3; 7.代码测试: console.log() console.log()向控制台打印括号中的内容 console.log('hello,world'); 总结 JavaScript 由三部分组成 ECMAScript、DOM和BOM组成 有两种方法引用JavaScript代码 一种是内部嵌套，另一种是外链JavaScript文件 标识符命名规则 关键字和保留字不能用作标识符 可以用console.log()向控制台打印内容","categories":[{"name":"笔记","slug":"笔记","permalink":"DiomandCrack.github.io/categories/笔记/"},{"name":"JavaScirpt学习笔记","slug":"笔记/JavaScirpt学习笔记","permalink":"DiomandCrack.github.io/categories/笔记/JavaScirpt学习笔记/"}],"tags":[{"name":"js笔记","slug":"js笔记","permalink":"DiomandCrack.github.io/tags/js笔记/"}]},{"title":"My First Blog","slug":"hello","date":"2017-10-22T09:09:55.000Z","updated":"2017-10-24T06:54:41.973Z","comments":true,"path":"2017/10/22/hello/","link":"","permalink":"DiomandCrack.github.io2017/10/22/hello/","excerpt":"","text":"我的第一篇博客！半路出家刚开始接触前端这行 需要学习很多知识 学习前端是兴趣使然近来发现前端体系异常庞大与繁杂希望：以后不会轻易迷失在各种诱惑里 也不会在向前走的同时无暇顾及反省自己 “人生不能承受的，不是存在，而是作为自我的存在。 生活，生活并没有任何幸福可言。生活，就是在这尘世中带着痛苦的自我。 然而存在，存在就是幸福。存在：变成喷泉，在这石头的承水盘中，世界仿佛热雨一般倾泻而下。” –米兰昆德拉 《不朽》","categories":[{"name":"日志","slug":"日志","permalink":"DiomandCrack.github.io/categories/日志/"}],"tags":[{"name":"Hello World!","slug":"Hello-World","permalink":"DiomandCrack.github.io/tags/Hello-World/"}]},{"title":"Hello World","slug":"hello-world","date":"2017-10-22T08:56:25.802Z","updated":"2017-10-22T08:56:25.802Z","comments":true,"path":"2017/10/22/hello-world/","link":"","permalink":"DiomandCrack.github.io2017/10/22/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new &quot;My New Post&quot; More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}